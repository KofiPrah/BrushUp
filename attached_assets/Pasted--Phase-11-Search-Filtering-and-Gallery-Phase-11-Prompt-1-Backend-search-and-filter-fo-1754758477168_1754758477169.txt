## Phase 11: Search, Filtering, and Gallery

- **Phase 11, Prompt 1:** _Backend search and filter for artworks._ Enhance the Artwork API to support search and filtering so users can find specific art. Use Django REST Framework’s filtering capabilities or **django-filter**. For example, add a filter backend to ArtworkViewSet: allow filtering by `author` (to get all artworks by a particular user) and by `folder` or visibility (for Phase 12). Also enable search by title or description using DRF’s `SearchFilter`. Configure `filter_backends = [SearchFilter, DjangoFilterBackend]` in the viewset, set `search_fields = ['title', 'description']` and `filterset_fields = ['author', 'folder']`. Provide the updated viewset code reflecting these changes. Ensure that unauthenticated users can still search/view public artworks, but private ones (phase 12) are filtered out unless owner.
    
- **Phase 11, Prompt 2:** _Frontend gallery view with search._ Implement a **Gallery** or **Home** component in React that displays a gallery of artworks and includes a search bar and filter options. Use the Axios API helper to query the artwork list with search or filter parameters. For example, when the user types in the search input, call `/api/artworks/?search=<query>` to get matching artworks. For filtering by artist, you might provide a dropdown of users or just accept a username query. Show the component code where the search term and filters are stored in state, and an effect triggers on changes to fetch the filtered data. Render the results in a grid of artwork cards (showing image thumbnails). Provide code for this component, focusing on how it interacts with the API (Axios calls with query params) and updates the UI.
    
- **Phase 11, Prompt 3:** _Pagination or infinite scroll._ (Optional) If the number of artworks can be large, implement pagination or infinite scrolling in the gallery. For example, enable DRF’s pagination (PageNumber or LimitOffset) in the backend and demonstrate how the frontend can load more results. Provide a code snippet showing how to append new results when a "Load more" button is clicked or when scrolling (e.g., using a page state that increments and fetches `/api/artworks/?page=2`). This ensures the gallery is scalable.
    
- **Phase 11, Prompt 4:** _Filtering by reactions or popularity._ (Optional) Add the ability to sort or filter artworks by popularity (e.g., number of critiques or reactions). This could involve adding an annotation in the backend queryset to count critiques or sum of reactions (karma) and ordering by it. Mention how to implement this (like an `/api/artworks/?ordering=-popularity` parameter).